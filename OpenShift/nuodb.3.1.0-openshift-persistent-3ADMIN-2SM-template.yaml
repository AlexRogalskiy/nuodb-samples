apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: nuodb.3.1.0-ee-persistent-3admin-2sm
  labels:
    template: nuodb.3.1.0-ee-persistent-3admin-2sm
  annotations:
    openshift.io/display-name: "NouDB CE (Persistent)"
    description: "NuoDB database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://hub.docker.com/r/nuodb/nuodb-ce/ \n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing"
    iconClass: https://www.nuodb.com/sites/all/themes/nuodb/logo.svg
    tags: "database,nuodb"
    openshift.io/long-description: "This template provides a Clustered NuoDB server with a database created.  The database is not stored on persistent storage, so any restart of the service will result in all data being lost.  The database name, username, and password are chosen via parameters when provisioning this service."
    openshift.io/provider-display-name: "NuoDB, Inc."
    openshift.io/documentation-url: "http://doc.nuodb.com/Latest/Default.htm"
    openshift.io/support-url: "https://support.nuodb.com/hc/en-us"
    message: "The following service(s) have been created in your project: placeholder.\n\n"
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: nuodb
    labels:
      deployment: nuodb
    annotations:
      "template.openshift.io/expose-username": "{.data['database-username']}"
      "template.openshift.io/expose-password": "{.data['database-password']}"
      "template.openshift.io/expose-database-name": "{.data['database-name']}"
  stringData:
    "database-username": "${DB_USER}"
    "database-password": "${DB_PASSWORD}"
    "database-name": "${DB_NAME}"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: "Service for Admin pods."
    labels:
      deployment: nuodb
      app: ${ADMIN_SVC_NAME}
    name: ${ADMIN_SVC_NAME}
  spec:
    ports:
    - name: 8888-tcp
      port: "8888"
      protocol: TCP
      targetPort: 8888
    - name: 48004-tcp
      port: 48004
      protocol: TCP
      targetPort: 48004
    - name: 48005-tcp
      port: 48005
      protocol: TCP
      targetPort: 48005
    selector:
      app: admin-${NODE_REGION}
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${SM_PVC_1}-${NODE_REGION}
    labels:
      deployment: nuodb
  spec:
    storageClassName: openebs-percona
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${SM_PVC_SIZE}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${SM_PVC_2}-${NODE_REGION}
    labels:
      deployment: nuodb
  spec:
    storageClassName: openebs-percona
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${SM_PVC_SIZE}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${ADMIN_PVC_1}-${NODE_REGION}
    labels:
      deployment: nuodb
  spec:
    storageClassName: openebs-percona
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${ADMIN_PVC_SIZE}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${ADMIN_PVC_2}-${NODE_REGION}
    labels:
      deployment: nuodb
  spec:
    storageClassName: openebs-percona
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${ADMIN_PVC_SIZE}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${ADMIN_PVC_3}-${NODE_REGION}
    labels:
      deployment: nuodb
  spec:
    storageClassName: openebs-percona
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${ADMIN_PVC_SIZE}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: "Admin pod instance deployment configuration"
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      deployment: nuodb
      app: admin-${NODE_REGION}
    name: admin1-${NODE_REGION}
  spec:
    nodeSelector:
      zone: ${NODE_REGION}
    replicas: 1
    selector:
      app: admin-${NODE_REGION}
      deploymentconfig: admin1-${NODE_REGION}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        labels:
          app: admin-${NODE_REGION}
          deploymentconfig: admin1-${NODE_REGION}
      spec:
        hostname: nuoadmin1-${NODE_REGION}
        containers:
        - env:
          - name: API_PORT
            value: "8888"
          - name: PEER_ADDRESS
            value: ${ADMIN_SVC_NAME}
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-name
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-password
          - name: NODE_REGION
            value: ${NODE_REGION}
          - name: NODE_TYPE
            value: NUOADMIN
          - name: ADMIN_TYPE
            value: LEADER
          - name: CLUSTER
            value: ${CLUSTER}
          - name: FIRST_CLUSTER_API
            value: ${FIRST_CLUSTER_API}
          image: ${CONTAINER}
          imagePullPolicy: IfNotPresent
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 2
            failureThreshold: 30
            successThreshold: 2
            timeoutSeconds: 1
            httpGet:
              path: /api/1/peers
              port: 8888
          name: admin1-${NODE_REGION}
          ports:
          - containerPort: 8888
            protocol: TCP
          - containerPort: 48004
            protocol: TCP
          - containerPort: 48005
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/nuodb/var/opt
            name: ${ADMIN_PVC_1}-${NODE_REGION}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 15
        volumes:
        - name: ${ADMIN_PVC_1}-${NODE_REGION}
          persistentVolumeClaim:
            claimName: ${ADMIN_PVC_1}-${NODE_REGION}
    test: false
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: "Admin pod instance deployment configuration"
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      deployment: nuodb
      app: admin-${NODE_REGION}
    name: admin2-${NODE_REGION}
  spec:
    nodeSelector:
      zone: ${NODE_REGION}
    replicas: 1
    selector:
      app: admin-${NODE_REGION}
      deploymentconfig: admin2-${NODE_REGION}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        labels:
          app: admin-${NODE_REGION}
          deploymentconfig: admin2-${NODE_REGION}
      spec:
        hostname: nuoadmin2-${NODE_REGION}
        containers:
        - env:
          - name: API_PORT
            value: "8888"
          - name: PEER_ADDRESS
            value: ${ADMIN_SVC_NAME}
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-name
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-password
          - name: NODE_REGION
            value: ${NODE_REGION}
          - name: NODE_TYPE
            value: NUOADMIN
          - name: ADMIN_TYPE
            value: FOLLOWER
          image: ${CONTAINER}
          imagePullPolicy: IfNotPresent
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 2
            failureThreshold: 30
            successThreshold: 2
            timeoutSeconds: 1
            httpGet:
              path: /api/1/peers
              port: 8888
          name: admin2-${NODE_REGION}
          ports:
          - containerPort: 8888
            protocol: TCP
          - containerPort: 48004
            protocol: TCP
          - containerPort: 48005
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/nuodb/var/opt
            name: ${ADMIN_PVC_2}-${NODE_REGION}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 15
        volumes:
        - name: ${ADMIN_PVC_2}-${NODE_REGION}
          persistentVolumeClaim:
            claimName: ${ADMIN_PVC_2}-${NODE_REGION}
    test: false
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: "Admin pod instance deployment configuration"
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      deployment: nuodb
      app: admin-${NODE_REGION}
    name: admin3-${NODE_REGION}
  spec:
    nodeSelector:
      zone: ${NODE_REGION}
    replicas: 1
    selector:
      app: admin-${NODE_REGION}
      deploymentconfig: admin3-${NODE_REGION}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        labels:
          app: admin-${NODE_REGION}
          deploymentconfig: admin3-${NODE_REGION}
      spec:
        hostname: nuoadmin3-${NODE_REGION}
        containers:
        - env:
          - name: API_PORT
            value: "8888"
          - name: PEER_ADDRESS
            value: ${ADMIN_SVC_NAME}
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-name
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-password
          - name: NODE_REGION
            value: ${NODE_REGION}
          - name: NODE_TYPE
            value: NUOADMIN
          - name: ADMIN_TYPE
            value: FOLLOWER
          image: ${CONTAINER}
          imagePullPolicy: IfNotPresent
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 2
            failureThreshold: 30
            successThreshold: 2
            timeoutSeconds: 1
            httpGet:
              path: /api/1/peers
              port: 8888
          name: admin3-${NODE_REGION}
          ports:
          - containerPort: 8888
            protocol: TCP
          - containerPort: 48004
            protocol: TCP
          - containerPort: 48005
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/nuodb/var/opt
            name: ${ADMIN_PVC_3}-${NODE_REGION}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 15
        volumes:
        - name: ${ADMIN_PVC_3}-${NODE_REGION}
          persistentVolumeClaim:
            claimName: ${ADMIN_PVC_3}-${NODE_REGION}
    test: false
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: "Storage Manager(SM) pod instance deployment configuration"
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      deployment: nuodb
      app: sm-${NODE_REGION}
      affinity: first
    name: sm1-${NODE_REGION}
  spec:
    nodeSelector:
      zone: ${NODE_REGION}
    replicas: 1
    minReplicas: 1
    maxReplicas: 1
    selector:
      app: sm-${NODE_REGION}
      deploymentconfig: sm1-${NODE_REGION}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        labels:
          app: sm-${NODE_REGION}
          deploymentconfig: sm1-${NODE_REGION}
      spec:
        containers:
        - env:
          - name: API_PORT
            value: "8888"
          - name: PEER_ADDRESS
            value: ${ADMIN_SVC_NAME}
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-name
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-password
          - name: NODE_REGION
            value: ${NODE_REGION}
          - name: NODE_TYPE
            value: SM
          - name: SM_TYPE
            value: FIRST
          image: ${CONTAINER}
          imagePullPolicy: IfNotPresent
          name: sm1-${NODE_REGION}
          ports:
          - containerPort: 48004
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /archive
            name: ${SM_PVC_1}-${NODE_REGION}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 15
        volumes:
        - name: ${SM_PVC_1}-${NODE_REGION}
          persistentVolumeClaim:
            claimName: ${SM_PVC_1}-${NODE_REGION}
    test: false
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: "Storage Manager(SM) pod instance deployment configuration"
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      deployment: nuodb
      app: sm-${NODE_REGION}
      affinity: second
    name: sm2-${NODE_REGION}
  spec:
    affinity:
      podAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: affinity
              operator: In
              values:
              - first
            topologyKey: kubernetes.io/hostname
    nodeSelector:
      zone: ${NODE_REGION}
    replicas: 1
    minReplicas: 1
    maxReplicas: 1
    selector:
      app: sm-${NODE_REGION}
      deploymentconfig: sm2-${NODE_REGION}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        labels:
          app: sm-${NODE_REGION}
          deploymentconfig: sm2-${NODE_REGION}
      spec:
        containers:
        - env:
          - name: API_PORT
            value: "8888"
          - name: PEER_ADDRESS
            value: ${ADMIN_SVC_NAME}
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-name
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-password
          - name: NODE_REGION
            value: ${NODE_REGION}
          - name: NODE_TYPE
            value: SM
          - name: SM_TYPE
            value: SECOND
          image: ${CONTAINER}
          imagePullPolicy: IfNotPresent
          name: sm2-${NODE_REGION}
          ports:
          - containerPort: 48004
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /archive
            name: ${SM_PVC_2}-${NODE_REGION}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 15
        volumes:
        - name: ${SM_PVC_2}-${NODE_REGION}
          persistentVolumeClaim:
            claimName: ${SM_PVC_2}-${NODE_REGION}
    test: false
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: "Transaction Engine(TE) pod instance deployment configuration"
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      deployment: nuodb
      app: te-${NODE_REGION}
      deploymentconfig: te-${NODE_REGION}
    name: te-${NODE_REGION}
  spec:
    nodeSelector:
      zone: ${NODE_REGION}
    replicas: ${TE_COUNT}
    selector:
      app: te-${NODE_REGION}
      deploymentconfig: te-${NODE_REGION}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        labels:
          app: te-${NODE_REGION}
          deploymentconfig: te-${NODE_REGION}
      spec:
        containers:
        - env:
          - name: API_PORT
            value: "8888"
          - name: PEER_ADDRESS
            value: ${ADMIN_SVC_NAME}
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-name
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: nuodb
                key: database-password
          - name: NODE_REGION
            value: ${NODE_REGION}
          - name: NODE_TYPE
            value: TE
          image: ${CONTAINER}
          imagePullPolicy: IfNotPresent
          name: te-${NODE_REGION}
          ports:
          - containerPort: 48004
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /archive
            name: admin-volume-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 15
        volumes:
        - emptyDir: {}
          name: admin-volume-1
    test: false
parameters:
  - name: NAMESPACE
    displayName: Namespace
    description: "The OpenShift Namespace where the ImageStream resides"
    value: openshift
  - name: NODE_REGION
    displayName: Deployment Zone
    description: "Deploy NuoDB to labeled OpenShift Nodes"
    required: true
    value: Default
  - name: FIRST_CLUSTER_API
    displayName: Existing NuoDB Admin Service Address
    description: Join an existing NuoDB cluster
    value:
  - name: DB_NAME
    displayName: Database Name
    description: "NuoDB database name to create"
    required: true
    value:
  - name: DB_USER
    displayName: Database Username
    description: "NuoDB connection username"
    required: true
    value:
  - name: DB_PASSWORD
    displayName: Database User Password
    description: "Database user password"
    required: true
    value:
  - name: ADMIN_SVC_NAME
    displayName: NuoDB Admin Service Name
    description: "Service Name to Connect to NuoAdmin"
    required: true
    value: nuodb-admin-service
  - name: SM_PVC_1
    displayName: Storage Manager Persistent Volume Claim SM 1
    description: "Name of the volume to create and use for persistent storage for SM 1"
    required: true
    value: nuodb-storage-pvc-1
  - name: SM_PVC_2
    displayName: Storage Manager Persistent Volume Claim SM 2
    description: "Name of the volume to create and use for persistent storage SM 2"
    required: true
    value: nuodb-storage-pvc-2
  - name: SM_PVC_SIZE
    diplayName: SM Volume Size (GB)
    description: "PVC Size for Storage Manager in GB"
    required: true
    value: 20G
  - name: ADMIN_PVC_1
    displayName: Admin Raft log Persistent Volume Claim Admin 1
    description: "Name of the volume to create and use for persistent storage for Admin 1"
    required: true
    value: nuodb-admin-pvc-1
  - name: ADMIN_PVC_2
    displayName: Admin Raft log Persistent Volume Claim Admin 2
    description: "Name of the volume to create and use for persistent storage Admin 2"
    required: true
    value: nuodb-admin-pvc-2
  - name: ADMIN_PVC_3
    displayName: Admin Raft log Persistent Volume Claim Admin 3
    description: "Name of the volume to create and use for persistent storage Admin 3"
    required: true
    value: nuodb-admin-pvc-3
  - name: ADMIN_PVC_SIZE
    diplayName: Admin Raft Log Volume Size (GB)
    description: "PVC Size for Admin in GB"
    required: true
    value: 5G
  - name: TE_COUNT
    displayName: Number of Transaction Engines to Launch
    description: "Start NuoDB with a specific number of TEs"
    required: true
    value: "2"
  - name: CONTAINER
    displayName: Container Registry
    description: "Registry to pull NuoDB from"
    required: true
    value: "docker.io/nuodb/nuodb-ee:3.2.0-intnuoadmin.1-1"
